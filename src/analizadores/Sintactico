package analizadores; 

import arbol.Arbol;
import arbol.Asignacion;
import arbol.Break;
import arbol.Declaracion;
import arbol.For;
import arbol.Funcion;
import arbol.If;
import arbol.Imprimir;
import arbol.Instruccion;
import arbol.FuncionLLama;
import arbol.Operacion;
import arbol.Return;
import arbol.SubIf;
import arbol.While;
import java.util.LinkedList;
import javax.swing.JTextArea;
import java_cup.runtime.*;

parser code 
{:
    /**
     * Vfariable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public Arbol AST;
    JTextArea textArea = new JTextArea();
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
    /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public Arbol getAST() {
        return AST;
    }


:} 

terminal String COMA,PTCOMA,PARIZQ,PARDER,LLAVIZQ,LLAVDER;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String MENQUE,MAYQUE,MENIGUALQUE,MAYIGUALQUE,DIFQUE,IGUALQUE;
terminal String ENTERO;
terminal String DECIMAL;
terminal String CADENA;
terminal String UMENOS;
terminal String RPRINT;
terminal String RDECLARA;
terminal String RNUMBER,RSTRING;
terminal String IGUAL;
terminal String IDENTIFICADOR;
terminal String RIF,RELSE,RWHILE,RFOR,RFUNCTION,RVOID,RRETURN,RBREAK;

non terminal ini;
non terminal LinkedList<Instruccion> instrucciones;
non terminal Instruccion instruccion;
non terminal LinkedList<Instruccion> instrucciones_sup;
non terminal Instruccion instruccion_sup;
non terminal LinkedList<Declaracion> parametros;
non terminal Declaracion declaracion;
non terminal Instruccion expresion;
non terminal String tipo;
non terminal String tipo_funcion;
non terminal SubIf instruccion_if;
non terminal SubIf instruccion_else;
non terminal Instruccion instruccion_if_sup;
non terminal LinkedList<Instruccion> expresiones;


precedence left  MENQUE,MAYQUE,MENIGUALQUE,MAYIGUALQUE,DIFQUE,IGUALQUE;

//Operaciones numericas
precedence left  MAS,MENOS;
precedence left  POR,DIVIDIDO;
precedence right UMENOS; 

start with ini; 

ini::=instrucciones_sup:a{:
    //se guarda el AST, que es la lista principal de instrucciones en la variable
    //AST que se definió dentro del parser
    parser.AST=new Arbol(a);
:}
;

instrucciones_sup ::= 
   instrucciones_sup:a instruccion_sup:b{:RESULT=a; RESULT.add(b);:}
 | instruccion_sup:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
; 

instruccion_sup ::= 
   RFUNCTION tipo_funcion:a IDENTIFICADOR:b PARIZQ parametros:c PARDER LLAVIZQ instrucciones:d LLAVDER {:RESULT=new Funcion(a,b,c,d);:}
 | RFUNCTION tipo_funcion:a IDENTIFICADOR:b PARIZQ PARDER LLAVIZQ instrucciones:c LLAVDER {:RESULT=new Funcion(a,b,c);:}
 | RDECLARA declaracion:a PTCOMA {:RESULT=a;:}
 | error
;

parametros ::= 
   parametros:a COMA declaracion:b{:RESULT=a; RESULT.add(b);:}
 | declaracion:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
; 

expresiones ::= 
   expresiones:a COMA expresion:b{:RESULT=a; RESULT.add(b);:}
 | expresion:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
; 

instrucciones ::= 
   instrucciones:a instruccion:b{:RESULT=a; RESULT.add(b);:}
 | instruccion:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
; 

instruccion ::= 
   RPRINT PARIZQ expresion:a PARDER PTCOMA  {:RESULT=new Imprimir(a,textArea);:}
 | RDECLARA declaracion:a PTCOMA {:RESULT=a;:}
 | IDENTIFICADOR:a IGUAL expresion:b PTCOMA {:RESULT=new Asignacion(a,b);:}
 | instruccion_if_sup:a  {:RESULT=a;:}
 | RWHILE PARIZQ expresion:a PARDER LLAVIZQ instrucciones:b LLAVDER {:RESULT=new While(a,b);:}
 | RFOR PARIZQ IDENTIFICADOR:a IGUAL expresion:b PTCOMA expresion:c PTCOMA IDENTIFICADOR:d IGUAL expresion:e PARDER LLAVIZQ instrucciones:f LLAVDER{:RESULT=new For(new Asignacion(a,b),c,new Asignacion(d,e),f);:}
 | IDENTIFICADOR:a PARIZQ expresiones:b PARDER PTCOMA {:RESULT=new FuncionLLama(a,b);:}
 | IDENTIFICADOR:a PARIZQ PARDER PTCOMA               {:RESULT=new FuncionLLama(a,new LinkedList<>());:}
 | RRETURN PTCOMA             {:RESULT=new Return();:}
 | RRETURN expresion:a PTCOMA {:RESULT=new Return(a);:}
 | RBREAK PTCOMA {:RESULT=new Break();:}
 | error
;

declaracion ::= 
   tipo:a IDENTIFICADOR:b {:RESULT=new Declaracion(b,a);:}
;

tipo ::= 
   RNUMBER:a  {:RESULT=a;:}
 | RSTRING:a  {:RESULT=a;:}
;

tipo_funcion ::= 
   tipo:a  {:RESULT=a;:}
 | RVOID:a  {:RESULT=a;:}
;

expresion  ::=
               MENOS       expresion:a         {:RESULT=new Operacion(a,  Operacion.Tipo_operacion.NEGATIVO);:}%prec UMENOS     
 | expresion:a MAS         expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);:}
 | expresion:a MENOS       expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);:}
 | expresion:a POR         expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);:}
 | expresion:a DIVIDIDO    expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);:}
 | expresion:a MAYQUE      expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);:} 
 | expresion:a MENQUE      expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);:}  
 | expresion:a MENIGUALQUE expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL_QUE);:} 
 | expresion:a MAYIGUALQUE expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL_QUE);:} 
 | expresion:a DIFQUE      expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE_QUE);:} 
 | expresion:a IGUALQUE    expresion:b         {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL_QUE);:} 
 | PARIZQ      expresion:a PARDER              {:RESULT=a;:}
 | ENTERO:a                                    {:RESULT=new Operacion(new Integer(a));:}
 | DECIMAL:a                                   {:RESULT=new Operacion(new Integer(a));:}
 | CADENA:a                                    {:RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);:}
 | IDENTIFICADOR:a                             {:RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);:}
 | IDENTIFICADOR:a PARIZQ expresiones:b PARDER {:RESULT=new FuncionLLama(a,b);:}
 | IDENTIFICADOR:a PARIZQ PARDER               {:RESULT=new FuncionLLama(a,new LinkedList<>());:}
;

instruccion_if_sup ::= 
   instruccion_if:a {:RESULT=new If(a);:}
 | instruccion_if:a instruccion_else:b {:RESULT=new If(a,b);:}
;

instruccion_if ::= 
   RIF PARIZQ expresion:a PARDER LLAVIZQ instrucciones:b LLAVDER {:RESULT=new SubIf(a,b);:}
;

instruccion_else ::= 
   RELSE LLAVIZQ instrucciones:a LLAVDER {:RESULT=new SubIf(a);:}
;